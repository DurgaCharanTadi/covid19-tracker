{"version":3,"sources":["images/logo.png","images/covid19-white.png","images/world_map.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","infiniteFlag","App","useState","query","setQuery","countrydetails","setCountry","alldetails","setAlldetails","flagDetails","setFlag","console","log","fetch","then","resAll","json","resultAll","className","src","require","alt","id","type","placeholder","onChange","e","target","value","onKeyPress","key","res","result","countryInfo","flag","Card","Img","variant","Body","Title","Text","ListGroup","ListGroupItem","casesPerOneMillion","displayType","thousandSeparator","deathsPerOneMillion","tests","testsPerOneMillion","todayCases","todayDeaths","country","cases","active","deaths","recovered","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.80890942.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b0e94896.png\";","module.exports = __webpack_public_path__ + \"static/media/covid19-white.4e80ec5e.png\";","module.exports = __webpack_public_path__ + \"static/media/world_map.5d2cfeb6.png\";","import React, {useState} from 'react';\n/*import logo from './logo.svg';*/\nimport './App.css';\nimport Card from 'react-bootstrap/Card';\nimport {  ListGroup, ListGroupItem } from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport NumberFormat from 'react-number-format';\n\nvar infiniteFlag = true;\n// import axios from \"axios\";\n\n\n\nfunction App() {\n\n\n\n  const [query,setQuery] = useState([]);\n  const [countrydetails,setCountry] = useState([]);\n  const [alldetails,setAlldetails] = useState([]);\n  const [flagDetails, setFlag] = useState([]);\n\n  console.log(\"infi flag: \" + infiniteFlag);\n\n  if((query == \"\")&&(infiniteFlag == true)){\n\n    fetch(`https://corona.lmao.ninja/v2/all`)\n    .then(resAll => resAll.json())\n    .then(resultAll => {\n      infiniteFlag = false;\n      console.log(\"infi flag: \" + infiniteFlag);\n      setAlldetails(resultAll);\n      console.log(resultAll);\n    },[]);\n  }\n\n  const search = e =>{\n   if(e.key === \"Enter\"){\n\n     fetch(`https://corona.lmao.ninja/v2/countries/${query}`)\n     .then(res => res.json())\n     .then(result => {\n       infiniteFlag = true;\n       setCountry(result);\n       // console.log(result);\n       setFlag(result.countryInfo.flag);\n\n     })\n   }\n }\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <img src={require('./images/logo.png')} alt=\"My Logo\" id=\"myLogo\" />\n        <h3>COVID19 Tracker</h3>\n        <img src={require('./images/covid19-white.png')} alt=\"covid 19\" id=\"covidLogo\" />\n      </div>\n      <div className=\"content\">\n\n        <div className=\"main_content\">\n        <div>\n        <input type=\"text\" placeholder=\"Search for the Country\"\n                className=\"search-bar\"\n                onChange={e =>setQuery(e.target.value)}\n                value={query}\n                onKeyPress = {search}/>\n        {(query == \"\" )? (\n          <Card className=\"countries_list\">\n             <Card.Img variant=\"top\"  src= {require('./images/world_map.png')}/>\n             <Card.Body>\n               <Card.Title>World</Card.Title>\n               <Card.Text>\n               </Card.Text>\n             </Card.Body>\n             <ListGroup className=\"list-group-flush\">\n               <ListGroupItem>Cases per One Million: <NumberFormat value={alldetails.casesPerOneMillion} displayType={'text'} thousandSeparator={true} /></ListGroupItem>\n               <ListGroupItem>Deaths per One Million: <NumberFormat value={alldetails.deathsPerOneMillion} displayType={'text'} thousandSeparator={true} /></ListGroupItem>\n               <ListGroupItem>Total Tests: <NumberFormat value={alldetails.tests} displayType={'text'} thousandSeparator={true} /></ListGroupItem>\n               <ListGroupItem>Tests per One Million: <NumberFormat value={alldetails.testsPerOneMillion} displayType={'text'} thousandSeparator={true} /></ListGroupItem>\n               <ListGroupItem>New Cases: <NumberFormat value={alldetails.todayCases} displayType={'text'} thousandSeparator={true} /></ListGroupItem>\n               <ListGroupItem>New Deaths: <NumberFormat value={alldetails.todayDeaths} displayType={'text'} thousandSeparator={true} /></ListGroupItem>\n             </ListGroup>\n          </Card>\n            ) : (\n              <Card className=\"countries_list\">\n                 <Card.Img variant=\"top\"  src={flagDetails} />\n                 <Card.Body>\n                   <Card.Title>{countrydetails.country}</Card.Title>\n                   <Card.Text>\n                   </Card.Text>\n                 </Card.Body>\n                 <ListGroup className=\"list-group-flush\">\n                   <ListGroupItem>Cases per One Million: <NumberFormat value={alldetails.casesPerOneMillion} displayType={'text'} thousandSeparator={true} /></ListGroupItem>\n                   <ListGroupItem>Deaths per One Million: <NumberFormat value={alldetails.deathsPerOneMillion} displayType={'text'} thousandSeparator={true} /></ListGroupItem>\n                   <ListGroupItem>Total Tests: <NumberFormat value={alldetails.tests} displayType={'text'} thousandSeparator={true} /></ListGroupItem>\n                   <ListGroupItem>Tests per One Million: <NumberFormat value={alldetails.testsPerOneMillion} displayType={'text'} thousandSeparator={true} /></ListGroupItem>\n                   <ListGroupItem>New Cases: <NumberFormat value={alldetails.todayCases} displayType={'text'} thousandSeparator={true} /></ListGroupItem>\n                   <ListGroupItem>New Deaths: <NumberFormat value={alldetails.todayDeaths} displayType={'text'} thousandSeparator={true} /></ListGroupItem>\n                   </ListGroup>\n              </Card>\n          )}\n\n        </div>\n            {(query == \"\" )? (\n            <div className=\"cases_blocks\">\n              <div className=\"cases_blocks_1\">\n                <div className=\"total_number_cases\">\n                  <p>Confirmed Cases</p>\n                  <p><NumberFormat value={alldetails.cases} displayType={'text'} thousandSeparator={true} /></p>\n                </div>\n                <div className=\"active_cases\">\n                  <p>Active Cases</p>\n                  <p><NumberFormat value={alldetails.active} displayType={'text'} thousandSeparator={true} /></p>\n                </div>\n              </div>\n\n              <div className=\"cases_blocks_2\">\n                <div className=\"total_deaths\">\n                  <p>Total Deaths</p>\n                  <p><NumberFormat value={alldetails.deaths} displayType={'text'} thousandSeparator={true} /></p>\n                </div>\n                <div className=\"recovered_cases\">\n                  <p>Recovered Cases</p>\n                  <p><NumberFormat value={alldetails.recovered} displayType={'text'} thousandSeparator={true} /></p>\n              </div>\n              </div>\n\n          </div>\n        ) : (\n          <div className=\"cases_blocks\">\n            <div className=\"cases_blocks_1\">\n              <div className=\"total_number_cases\">\n                <p>Confirmed Cases</p>\n                <p><NumberFormat value={countrydetails.cases} displayType={'text'} thousandSeparator={true} /></p>\n              </div>\n              <div className=\"active_cases\">\n                <p>Active Cases</p>\n                <p><NumberFormat value={countrydetails.active} displayType={'text'} thousandSeparator={true} /></p>\n              </div>\n            </div>\n\n            <div className=\"cases_blocks_2\">\n              <div className=\"total_deaths\">\n                <p>Total Deaths</p>\n                <p><NumberFormat value={countrydetails.deaths} displayType={'text'} thousandSeparator={true} /></p>\n              </div>\n              <div className=\"recovered_cases\">\n                <p>Recovered Cases</p>\n                <p><NumberFormat value={countrydetails.recovered} displayType={'text'} thousandSeparator={true} /></p>\n            </div>\n            </div>\n\n        </div>\n      )}\n      </div>\n\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}